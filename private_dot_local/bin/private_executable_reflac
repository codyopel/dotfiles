#!/usr/bin/env python

# Ensures all lossless files in a given path are encoded as FLAC with
# compression level 8.

import os
import multiprocessing
import shutil
import subprocess
import sys


def convert2flac(input: str):
    filename, _ = os.path.splitext(input)
    output = filename + '.flac'
    print('converting: ' + input + ' -> ' + output)
    p = subprocess.Popen(["ffmpeg", "-i", input, '-c:a', 'flac', output],
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    _, error = p.communicate()
    if p.returncode != 0:
        raise IOError("ffmpeg failed: %s" % error)
    return output


def set_tag(f: str, key: str, value: str):
    p = subprocess.Popen(["metaflac", "--set-tag={}={}".format(key, value), f],
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    _, merror = p.communicate()
    if p.returncode != 0:
        raise IOError("metaflac failed: %s" % merror)


def get_tag(f: str, key: str):
    p = subprocess.Popen(["metaflac", "--show-tag={}".format(key), f],
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    output, error = p.communicate()
    if p.returncode != 0:
        raise IOError("metaflac failed: %s" % error)
    out = output.rstrip().decode("utf-8")
    return out.split('=')[-1]


def reencode_flac(f: str):
    cmd = [
        'flac', f, '--force', '--verify', '--compression-level-8',
        '--exhaustive-model-search', '--qlp-coeff-precision-search'
    ]
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    _, error = p.communicate()
    if p.returncode != 0:
        raise IOError("flac failed: %s" % error)


def compress_flac(f):
    compression = "COMPRESSION"
    _, extension = os.path.splitext(f)
    if extension == '.flac':
        # Don't re-process processed files
        tag = get_tag(f, compression)
        if tag != '' and int(tag) == 8:
            print('already compressed: ' + f)
            return
    else:
        f = convert2flac(f)

    reencode_flac(f)
    set_tag(f, compression, str(8))
    print('compressed: ' + f)


assert shutil.which('flac') != None
assert shutil.which('ffmpeg') != None
assert shutil.which('metaflac') != None

idir = str(sys.argv[1])
assert os.path.isdir(idir)

audioFiles = []
for root, dirs, files in os.walk(idir):
    for f in files:
        if os.path.isfile(os.path.join(root, f)):
            filename, extension = os.path.splitext(f)
            if extension not in ['.ape', '.flac', '.wav']:
                continue
            audioFiles.append(os.path.join(root, f))

threads = multiprocessing.cpu_count()
pool = multiprocessing.Pool(processes=threads)
results = pool.map_async(compress_flac, audioFiles)
pool.close()
pool.join()
