[alias]
  # View the current working tree status using the short format
  s = status

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD --; git diff --patch-with-stat"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  c = clone --recurse-submodules

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git branch \"$1\" 2> /dev/null || :; git switch \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { \
    git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; \
  }; f"

  # Find commits by commit message
  fm = "!f() { \
    git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; \
  }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch
  mpr = "!f() { \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
      git fetch origin refs/pull/$1/head:pr/$1 && \
      git checkout -B $branch && \
      git rebase $branch pr/$1 && \
      git checkout -B $branch && \
      git merge pr/$1 && \
      git branch -D pr/$1 && \
      git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
    fi \
  }; f"

  initsubmodules = !git submodule update --init --recursive

  # Removes a commited submodule and all traces, use deinit instead if uncommited
  rmsubmodule = "!f() { \
      git rm --force \"$1\" \
        && rm -frv \".git/modules/$1\" \
    ;}; f"

  # Fix accidentally calling git from git (e.g. git git status)
  git = !exec git

[core]
  # Treat spaces before tabs and all kinds of trailing whitespace
  # as an error.
  whitespace = space-before-tab,trailing-space
  autocrlf = false

[color]
  ui = auto

[color "branch"]
  current = cyan ul
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold  # line info
  old = red  # deletions
  new = green  # additions

[color "status"]
  branch = red ul bold
  added = green
  changed = yellow
  deleted = red
  header = white
  nobranch = red
  untracked = cyan

[commit]
  gpgSign = true

[diff]
  # Detect copies as well as renames
  renames = copies

[diff "bin"]
  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[gpg]
  format = ssh

[gpg "ssh"]
  defaultKeyCommand = git-get-signing-key

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[init]
  defaultBranch = master

[push]
  default = simple
  gpgSign = if-asked

[submodule]
  recurse = true

[tag]
  gpgSign = true

# URL shorthands

[url "git@bitbucket.org:"]
  insteadOf = "bb:"
  pushInsteadOf = "bitbucket:"
  pushInsteadOf = "git://bitbucket.org/"
  pushInsteadOf = "https://bitbucket.org/"

[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
  pushInsteadOf = "https://github.com/"

[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
  pushInsteadOf = "https://gist.github.com/"

[url "git@gitlab.com:"]
  insteadOf = "gl:"
  pushInsteadOf = "gitlab:"
  pushInsteadOf = "git://gitlab.com/"
  pushInsteadOf = "https://gitlab.com/"

[user]
  name = Cody W. Opel
  email = cwopel@chlorm.net

[pull]
  rebase = false
