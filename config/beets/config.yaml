art_filename: Folder

asciify_paths: yes

clutter: [
    'Thumbs.db',
    '.DS_Store',
    '*.cue',
    '*.m3u',
    '*.pls',
    '*.sfv'
]

directory: ~/Music/confimed

import:
    autotag: yes
    default_action: skip
    link: no
    move: yes
    resume: yes
    write: no
    timid: yes
    detail: yes

library: ~/.local/share/beets/library.db

match:
    #ignored: missing_tracks
    #max_rec:
    #    missing_tracks: medium
    #    unmatched_tracks: medium
    preferred:
        original_year: yes
    strong_rec_match: 0.05

max_filename_length: 200

musicbrainz:
    searchlimit: 10

original_year: yes

# TODO: Remove trailing underscores
# TODO: strip leading characters (dead larry as the radio)
# TODO: strip plus signs (lionize)
# TODO: strip ep in titles
# TODO: remove underscores (philip glass sym 3)
# TODO: replace ' = ' (halford = halford)

# WARNING: ordering of regex filters matters
replace:
    # `_ ` -> `-` (colon space to hyphen)
    '\:\s+': '-'
    # ` - ` -> `_` (space hyphen space to underscore)
    '\s+\-\s+': _
    # ` / ` -> `_` (space forward-slash space)
    '\s+\/\s+': _
    # ` _ ` -> `_` (space under-score space to underscore)
    '\s+\_\s+': _
    # `/` `\` -> `_` (forwardslash or backslash to underscore)
    '[\\/]': _
    # `. ` -> `.` (period space to period)
    '\.\s+': .
    # Remove commas
    '\,': ''
    # Remove apostrophes
    "'": ''
    # Remove apostrophes
    "â€™": ''
    # Remove exclamation points
    '\!': ''
    # Remove control characters
    '[\x00-\x1f]': _
    # Remove Windows reserved characters
    '[<>"\?\*\|]': ''
    # Remove leading periods
    '^\.': ''
    # Remove trailing periods
    '\.$': ''
    # Remove leading whitespace
    '^\s+': ''
    # Remove trailing whitespace
    '\s+$': ''
    # This filter must be applied last
    # ` ` -> `.` (space to period)
    '\s+': .

item_fields:
    # Make sure the release country is in ISO 3166-2 format
    country_code: |
        from pycountry import countries
        alternate_name = {
            'Europe': 'European Union',
            'Russia': 'Russian Federation',
            # FIXME: Implement a way to parse for multiple countries
            #        and make a list of alpha2 codes.
            #      - Need to figure out a seperator character, can't be hypen
            #        or other characters if any that are a part of ISO 3166
            'UK & Europe': 'European Union',
            'UK, Europe & US': 'World Wide',
            'USA & Canada': 'North America'
        }
        custom_alpha2 = {
            # The European Union does not meet the criteria for inclusion
            # in ISO 3166-1, but EU is reserved for the purpose by
            # ISO 3166/MA.
            'European Union': 'EU',
            # ISO 3166 establishes NA as the North American continent code,
            # but it would conflict with the Namibia country code, so use
            # an un-designated code.
            'North America': 'NM',
            'World Wide': 'WW'
        }
        translate_invalid_alpha2 = {
            # Translate musicbrainz's alpha2 code for the European Union
            'XE': 'EU',
            'XW': 'WW'
        }
        if len(country) > 2:
            if country in alternate_name:
                country2 = alternate_name[country]
            else:
                country2 = country

            if country2 in custom_alpha2:
                c = custom_alpha2[country2]
            else:
                try:
                    c = countries.get(name=country2).alpha2
                except:
                    try:
                        c = countries.get(name=custom_alpha2[country2]).alpha2
                    except:
                        # TODO: maybe this should return XU, because validation
                        #       has already failed at this point.
                        #     - this should also log files incase a work around
                        #       needs to be put in place to handle another
                        #       exception.
                        c = country2
        # Attempt to fix known invalid ISO 3166 codes
        elif len(country) == 2:
            try:
                c = countries.get(alpha2=country).alpha2
            except:
                if country.upper() in translate_invalid_alpha2:
                    c = translate_invalid_alpha2[country]
                else:
                    c = country
        else:
            # Incase `country` contains a single character or isn't set,
            # use musicbrainz's code for unknown country.
            c = "XU"
        return c
    # Normalize relase types
    release_type: |
        # This is mainly to fix discogs metadata sources which allow multiple
        # entries in the albm type field.
        # FIXME: Should parse strings into an array in order and then match
        #        against a list of excepted keywords and match in order of
        #        preference rather than the first match.
        translate_release_type = {
            # Album
            'album, deluxe edition, enhanced': 'album',
            'album, enhanced': 'album',
            'album, limited edition': 'album',
            'album, reissue': 'album',
            'album, reissue, remastered': 'album',
            'album, remastered': 'album',
            # aunique can't handle conditionals so allow `album repress`
            # until this can be fixed.
            # e.g. if album,catalognum,media_type,release_type,&,year
            #      are identical between to releases, only then apply
            #      a user specified method for handling unique senarios.
            #      (i.e. the artist/album directory paths result in collisions)
            #'album, repress': 'album',
            'album, special edition': 'album',
            'album, unofficial release': 'album',
            'hdcd, album': 'album',
            'lp, album': 'album',
            'mini-album': 'album',
            'mini-album, enhanced': 'album',
            'mini-album, reissue': 'album',
            'mini-album, repress': 'album',
            # Compilation
            'album, compilation': 'compilation',
            'compilation, reissue': 'compilation',
            'promo, compilation': 'compilation',
            # EP
            'ep, limited edition': 'ep',
            'ep, mp3': 'ep',
            'ep, promo, limited edition': 'ep',
            'shape, ep, limited edition': 'ep',
            # Single
            'single, promo': 'single'
        }
        if albumtype.lower() in translate_release_type:
            rt = translate_release_type[albumtype.lower()]
        else:
            rt = albumtype
        return rt
    media_type: |
        translate_media_type = {
            '12 vinyl': 'lp',
            'digital media': 'digital',
        }
        if media.lower() in translate_media_type:
            m = translate_media_type[media.lower()]
        else:
            m = media
        return m

# beet ls -af '$albumtype $album'
# TODO: handle singletons (tracks not associated with an album)
# TODO: featured artists:
#       -add featured artists to artist or album artist tag (probably album artist)
#       -add featured artists to track title
#       -remove featured artists that are already part of the title

# TODO: artist country of origin in ISO 3166-2 with artist name
# TODO: file format, add custom function so that if flac, also include bit depth
#       and sample rate, for mp3, include mp3 type
paths:
    default: %lower{%asciify{${albumartist}/%if{${year},${year},${original_year}}_$album%if{${catalognum},_[${catalognum}]}%if{${country_code},_[${country_code}]}%if{${media_type},_[${media_type}]}%if{${release_type},_[${release_type}]}/${albumartist}_%if{${year},${year},${original_year}}_${album}%if{${catalognum},_[${catalognum}]}%if{${country_code},_[${country_code}]}%if{${release_type},_[${release_type}]}%if{${media_type},_[${media_type}]}_${track}_${title}}}
    comp: COMPILATIONS/%lower{%asciify{$album%aunique{}/${album}_%if{${original_year},${original_year},${year}}_${track}-${title}}}
    soundtrack: SOUNDTRACKS/%lower{%asciify{${album}/${album}_%if{${original_year},${original_year},${year}}_${track}-${title}}}

per_disc_numbering: no

sort_case_insensitive: yes

threaded: yes

ui:
    color: yes

write: yes

# Plugins
plugins: [
    alternatives,
    badfiles,
    chroma,
    discogs,
    embedart,
    fetchart,
    fromfilename,
    inline,
    mbsync,
    moveall,
    mpdupdate,
    scrub
]

# Plugin configuration
acoustid:
    apikey: 9WbF9763sG
bpd:
    host: 127.0.0.1
    port: 6600
    volume: 100
chroma:
    auto: yes
#copyartifacts:
#    extensions: .cue .log .jpg .png
#    print_ignored: yes
embedart:
    auto: yes
    compare_threshold: 0
    ifempty: no
    maxwidth: 10000
    remove_art_file: no
fetchart:
    auto: yes
    cautious: yes
    cover_names: cover front art album folder Folder
    min_width: 800
    max_width: 10000
    enforce_ratio: no
    sources: wikipedia coverart albumart amazon
mpd:
    host: localhost
    port: 6600
    rating: no
scrub:
    auto: yes
