#!/usr/bin/env bash

# Usage: conva <artist>

source "$(lib-bash)"

encode_file() {
  local AlbumArt
  local AlbumArtExt
  local Dir
  local -r File="$@"
  local FileName
  local InputDir
  local InSF
  local InSR
  local IsSourceMusicDir
  local OutputFile
  local OutputDir
  local RelOutDir

  # Filename w/o ext
  FileName="$(basename "$(echo "${File}" | sed -r 's/\.[[:alnum:]]+$//')")"
  InputDir="$(dirname ${File})"

  if [ -n "$(echo "${File}" | grep '/Music/')" ] ; then
    # Return the path without the music directory in the path
    IsSourceMusicDir="$(dirname "$(echo "${File}" | sed -e "s,$(music_dir "${File}")/,,")")"
    OutputDir="${OUTPUT_DIRECTORY}${IsSourceMusicDir:+/${IsSourceMusicDir}}"
    if [ ! -d "${OutputDir}" ] ; then
      Directory::Create "${OutputDir}"
    fi
  fi

  OutputFile="${OutputDir}/${FileName}.ogg"

  # Input Sample Format/Rate
  if [ ! -f "${OutputFile}" ] ; then
    InSF="$(
      ffprobe -v error -select_streams 0 -show_entries stream=sample_fmt \
        -of default=noprint_wrappers=1:nokey=1 ${File})"
    InSR="$(
      ffprobe -v error -select_streams 0 -show_entries stream=sample_rate \
        -of default=noprint_wrappers=1:nokey=1 ${File})"
  fi

  # Check for album art image file
  if [ ! -f "${OutputDir}"/[Ff]older.*g ] ; then
    AlbumArt="$(
      find "${InputDir}" -type f -regextype posix-extended \
        -regex ".*[Ff]older.([Jj][Pp]([Ee]|)[Gg]|[Pp][Nn][Gg])" \
        -print -quit
    )"
    AlbumArtExt="${AlbumArt##*.}"
    if [ -f "${AlbumArt}" ] && [ ! -f "${OutputDir}/Folder.${AlbumArtExt}" ] ; then
      # Since we are running this function in parallel, it may attempt
      # to clobber Folder.*g and fail, so ignore failures.
      cp -v "${AlbumArt}" "${OutputDir}/Folder.${AlbumArtExt}" || :
    fi
  fi

  # if [ -f "${OutputFile}" ] ; then
  #   return 0
  # fi

  bash /home/cwopel/Projects/arkive/src/bin/arkive-audio -p ogg-opus -i "$File" -o "$OutputDir"

  #-af "compand=attacks=0|0:decays=1|1:points=-90/-900|-70/-70|-21/-21|0/-15:soft-knee=0.01:gain=0:volume=0:delay=0" \
}

# If a path contains $HOME/Music return the music directory.
music_dir() {
  echo "${1}" |
    awk '{
      music_dir=ENVIRON["HOME"] "/Music"
      music_dir_confirmed=music_dir "/confirmed"
      music_dir_unconfirmed=music_dir "/unconfirmed"
      if ($0 ~ music_dir) {
        if ($0 ~ music_dir_confirmed) {
          print music_dir_confirmed
        } else if ($0 ~ music_dir_unconfirmed) {
          print music_dir_unconfirmed
        } else {
          print music_dir
        }
      }
    }'
}

Path::Check 'ffmpeg' || exit 1
Path::Check 'ffprobe' || exit 1

TMPDIR="$(mktemp -d)"
#export OUTPUT_DIRECTORY="$(pwd)"
export OUTPUT_DIRECTORY="$HOME/Sync/resilio/music"
if [ -n "$(music_dir "${OUTPUT_DIRECTORY}")" ] ; then
  echo "Can't encode in music directory"
  exit 1
fi

if [ -z "${1}" ] ; then
  InputRaw=("${XDG_CONFIG_HOME:-${HOME}/.config}/conva/music.list")
else
  InputRaw=("$@")
fi

if [ "$(basename "${InputRaw[0]}")" == 'music.list' ] ; then
  TmpArray=($(cat "$(dirname ${InputRaw[0]})/music.list"))
  for i in "${TmpArray[@]}" ; do
    # FIXME: use xdg dir
    InputDirectories+=("${HOME}/Music/${i}")
  done
else
  InputDirectories=("${InputRaw[@]}")
fi

export CONCURRENT_LIMIT=`Cpu::Logical`
export CONCURRENT_COMPACT=0

# Chunk encodes by directory to prevent hitting BASH's function
# argument limit.
for Dir in "${InputDirectories[@]}" ; do
  Log::Message 'info' "dir: $Dir"
  # Clear previous file list
  echo '' > "$TMPDIR/filelist"
  # Check for valid audio files
  find "${Dir}" \
    -type f \
    -regextype posix-extended \
    -regex ".*\.(ape|flac|ogg|m4a|mp3|wav|wma)" \
    2>> "${TMPDIR}/errors" |
  while read AudioFile ; do
    if [ ! -f "${AudioFile}" ] ; then
      continue
    fi
    Fname="$(basename "$(echo "${AudioFile}" | sed -r 's/\.[[:alnum:]]+$//')")"
    # Write list of audio files to a temp file
    echo "${Fname} ${AudioFile}" >> "${TMPDIR}/filelist"
  done
  # Generate concurrent args from temp file list
  ConcurrentArgs=($(awk '{ print "- " $1 " encode_file " $2; }' ${TMPDIR}/filelist))
  Metadata="${ConcurrentArgs[2]}"
  # Remove invalid `- encode_file` created as first arg
  if [ "${ConcurrentArgs[2]}" == '-' ] ; then
    unset ConcurrentArgs[0]
    unset ConcurrentArgs[1]
    Metadata="${ConcurrentArgs[5]}"
  fi

  if [ -n "$(echo "${Metadata}" | grep '/Music/')" ] ; then
    Artist="$(echo "${Metadata}" | awk -F'/' '/Music/ {print $6}')"
    Album="$(echo "${Metadata}" | awk -F'/' '/Music/ {print $7}')"
  fi
  if [ -n "$(cat "${TMPDIR}/filelist")" ] ; then
    echo
    echo "Artist: ${Artist}"
    echo "Album: ${Album}"
    concurrent "${ConcurrentArgs[@]}"
  fi
done

if [ -f "${TMPDIR}/errors" ] ; then
  cat "${TMPDIR}/errors"
fi
