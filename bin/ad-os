#!/usr/bin/env bash
#
#                         Amazon Drive - Object Store
#
# Copyright (c) 2016, Cody Opel <codyopel@gmail.com>
# All Rights Reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

set -o errexit
set -o errtrace
set -o functrace
set -o pipefail

ADOS_REMOTE_DIR="${ADOS_REMOTE_DIR:-/backups}"
ADOS_RCLONE_REMOTE="${ADOS_RCLONE_REMOTE:-ad}"
LOG_LEVEL='info'

########################### System/Vendored lib-bash ###########################

if type 'lib-bash' > /dev/null 2>&1 ; then
  source "$(lib-bash)"
else
Main::Name() {
  Function::RequiredArgs '0' "$#"
  if [ -n "${PROGRAM_NAME}" ] ; then
    echo "${PROGRAM_NAME}"
  else
    echo "$(basename "${0}")"
  fi
}

Directory::Create() {
  Function::RequiredArgs '1' "$#"
  while [ "${1}" ] ; do
    # Make sure directory is not a symlink
    if [ -L "${1}" ] ; then
      unlink "${1}" 1>&2
    fi
    # Create directory
    if [ ! -d "${1}" ] ; then
      mkdir --parents "${1}" 1>&2
    fi
    shift
  done
}

Directory::Remove() {
  Function::RequiredArgs '1' "$#"
  while [ "${1}" ] ; do
    # Make sure directory is not a symlink
    if [ -L "${1}" ] ; then
      unlink "${1}" 1>&2
    fi
    # Remove directory
    if [ -d "${1}" ] ; then
      rm --recursive --force "${1}" 1>&2
    fi
    shift
  done
}

Function::RequiredArgs() {
  local -r ArgsExpected=${1}
  local -r ArgsRecieved=${2}
  local -r ArgsNumber=$#
  local Plural=
  if [ ! ${ArgsNumber} == 2 ] ; then
    Log::Message 'error' "expected \`2' arguments, but recieved \`${ArgsNumber}'"
    return 1
  fi
  if [ ${ArgsExpected} -gt 1 ] ; then
    Plural='s'
  fi
  if [ ${ArgsExpected} -ne ${ArgsRecieved} ] ; then
    Log::Message 'error' \
        "expected \`${ArgsExpected}' argument${Plural}, but recieved \`${ArgsRecieved}'" \
        "${FUNCNAME[1]}"
    return 1
  fi
}

# Print a debug message with the current function and command executed
# Usage: add `set -o functrace` & `trap 'Log::Message' DEBUG`
Log::Func() {
  Function::RequiredArgs '0' "$#"
  # Requires `set -o functrace` to allow traps on DEBUG & RETURN to be
  # inherited by shell functions, command substitutions, and commands
  # executed in a subshell environment.

  if [ "${LOG_LEVEL}" == 'trace' ] ; then
    Log::Message 'debug' "${BASH_COMMAND}" "${FUNCNAME[1]}"
  fi
}

# Print a debug message with current function and custom message
# $1 - Level (trace,debug,info,warn,error,fatal)
# $2 - Message
# $3 - override name of function returned in message
Log::Message() {
  [[ $# == @(2|3) ]]
  local -r -i Descriptor="${DISCRIPTOR:-2}"
  local Func="${3}"
  local -r Level="${1}"
  local -r -A LogLevel=(
    ['off']=0
    ['fatal']=1
    ['error']=2
    ['warn']=3
    ['info']=4
    ['debug']=5
    ['trace']=6
  )
  local -r Message="${2}"

  if ! Var::Type.integer "${LogLevel[${Level}]}" 2>&- ; then
    echo "$(Main::Name) [error] ${FUNCNAME}: invalid debug level: ${Level}" >&2
    return 1
  fi

  Var::Type.string "${Message}"

  if ! Var::Type.string "${Func}" 2>&- ; then
    Func="${FUNCNAME[1]}"
  fi

  if [ ${LogLevel[${Level}]} -le ${LogLevel[${LOG_LEVEL}]} ] ; then
    echo "$(Main::Name) [${Level}] ${Func}: ${Message}" >&${Descriptor}
  fi
}

Log::Trace() {
  Function::RequiredArgs '0' "$#"
  local -i i=0
  local -i x=${#BASH_LINENO[@]}

  for ((i=x-2; i>=0; i--)) ; do
    echo '  File' \"${BASH_SOURCE[i+1]}\", line ${BASH_LINENO[i]}, in ${FUNCNAME[i+1]}
    # Print the text from the line
    sed -n "${BASH_LINENO[i]}{s/^/    /;p}" "${BASH_SOURCE[i+1]}"
  done
}

# Test to see if a binary exists in the path
Path::Check() { Function::RequiredArgs '1' "$#" ; type "${1}" > /dev/null 2>&1 ; }

String::Version() {
  Function::RequiredArgs '2' "$#"
  if [ "${1}" == "${2}" ] ; then
    echo 'eq' ; return 0
  fi
  local -r IFS=.
  local -i i
  local -a ver1=(${1})
  local -a ver2=(${2})
  # fill empty fields in ver1 with zeros
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)) ; do
      ver1[i]=0
  done
  for ((i=0; i<${#ver1[@]}; i++)) ; do
    if [[ -z ${ver2[i]} ]] ; then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    elif ((10#${ver1[i]} > 10#${ver2[i]})) ; then
      echo 'gt' ; return 0
    elif ((10#${ver1[i]} < 10#${ver2[i]})) ; then
      echo 'lt' ; return 0
    fi
  done
  Log::Message 'error' 'version comparison failed'
  return 1
}

String::Version.atleast() { [[ "$(String::Version "${1}" "${2}")" == @('eq'|'gt') ]] ; }

# Detect variable type
Var::Type() {
  Function::RequiredArgs '1' "$#"
  local -r Var="${1}"

  if [[ ${Var} =~ ^-?[0-9]+\.[0-9]+$ ]] ; then
    echo 'float'
  elif [[ ${Var} =~ ^-?[0-9]+$ ]] ; then
    echo 'integer'
  elif [ "${Var}" == true ] || [ "${Var}" == false ] ; then
    echo 'boolean'
  elif [ ! -z "${Var}" ] ; then
    echo 'string'
  else
    echo 'null'
  fi
}

# Detect if variable type is integer
Var::Type.integer() {
  Function::RequiredArgs '1' "$#"
  local Type
  local -r Var="${1}"

  Type="$(Var::Type "${Var}")"

  [ "${Type}" == 'integer' ] || {
    Log::Message 'error' \
      "Value is a ${Type}, while a integer was expected" \
      "${FUNCNAME[1]}"
    return 1
  }
}

# Detect if variable type is string
Var::Type.string() {
  Function::RequiredArgs '1' "$#"
  local Type
  local -r Var="${1}"

  Type="$(Var::Type "${Var}")"

  [ "${Type}" != 'null' ] || {
    Log::Message 'error' \
      "Value is a ${Type}, while string was expected" \
      "${FUNCNAME[1]}"
    return 1
  }
}
fi

################################################################################

# Make sure BASH meets version requirements
String::Version.atleast "${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}" '4.4' || {
  Log::Message 'error' \
    "ad-os requires BASH 4.4+, you have: ${BASH_VERSINFO[0]}.${BASH_VERSINFO[1]}"
  exit 1
}

trap 'Log::Func' DEBUG
trap 'ADOS::Cleanup ; exit 1' SIGINT SIGTERM
trap -- 'ADOS::Cleanup ; Log::Trace ; exit 1' ERR

function ADOS::Compress {
  Function::RequiredArgs '3' "$#"
  local -a Arguments
  local -r Input="${1}"
  local -r Hash="${2}"
  local -r Password="${3}"

  Arguments=(
    'a'
    '-t7z'
  )
  if [ -d "${Input}" ] ; then
    # Include all subdirectories
    Arguments+=('-r')
  fi
  Arguments+=(
    '-mhe=on'  # Enable header encryption
    '-mx=0'  # Disable compression
    '-v20m'  # Use 20Mb chucks for easier file retransmission on errors.
    "-p${Password}"  # Enable encryption
    "${_tmpdir_}/objects/${Hash}.7z"
    "${Input}"
  )

  Log::Message 'info' "${Input}"
  7za "${Arguments[@]}"
}

function ADOS::Extract {
  Function::RequiredArgs '3' "$#"
  local -a Arguments
  local -r File="${1}"
  local -r ZipFile="${2}"
  local -r Password="${3}"

  OutputDir="$(dirname "${File}")"

  Arguments=(
    'x'
    "-p${Password}"
    "-o${OutputDir}"
    "${ZipFile}"
  )

  7za "${Arguments[@]}"
}

function ADOS::ACD {
  Function::RequiredArgs '3' "$#"
  local -r Action="${1}"
  local -a Arguments
  local -r PathLocal="${2}"
  local -r PathRemote="${3}"

  # Fix ordering of arguments passed to acd_cli
  case "${Action}" in
    'checksum')
      Arguments=(
        'md5sum'
        '--quiet'
        "${ADOS_RCLONE_REMOTE}:${PathRemote}"
      )
      rclone "${Arguments[@]}" | awk -F' ' '{print $1 ; exit}'
      return 0
      ;;
    'download')
      Arguments=(
        'sync'
        "${ADOS_RCLONE_REMOTE}:${PathRemote}"
        "${PathLocal}"
      )
      ;;
    'trash')
      Arguments=(
        'delete'
        '--drive-use-trash'
        "${ADOS_RCLONE_REMOTE}:${PathRemote}"
      )
      ;;
    'upload')
      Arguments=(
        'sync'
        "${PathLocal}"
        "${ADOS_RCLONE_REMOTE}:${PathRemote}"
      )
      ;;
    *)
      Log::Message 'error' "invalid action: ${Action}"
      return 1
      ;;
  esac

  # Retry until a zero exit staus is returned
  while true ; do
    if [ "${Action}" == 'upload' ] ; then
      # rclone doesn't seem to correctly overwrite files, always try
      # removing files with the same name in case of collisions.
      rclone 'delete' '--drive-use-trash' "${PathRemote}" || :
    fi
    rclone "${Arguments[@]}" || {
      echo 'retrying' >&2
      if [ "${Action}" == 'upload' ] ; then
        # ensure partial files are replaced
        rclone 'delete' '--drive-use-trash' "${PathRemote}" || :
      fi
      continue
    }
    break
  done
}

# This function is meant mainly for catching cases where rclone doesn't
# properly overwrite files.
function ADOS::Checksum {
  local -r Input="${1}"
  local Iter=1
  local Object
  local -a Objects

  Object="$(jq -r -c -M '.Object.Name' "${Input}")"
  mapfile -t Objects < <(jq -r -c -M '.Object.Files[].Name' "${Input}")

  for i in "${Objects[@]}" ; do
    Log::Message 'info' "file ${Iter} of ${#Objects[@]}"
    ChecksumStored="$(
        jq -r -c -M \
            ".Object.Files[]|select(.Name|contains(\"${i}\")).Md5" \
            "${Input}"
    )"
    ChecksumRemote="$(
        ADOS::ACD 'checksum' '-' "${ADOS_REMOTE_DIR}/${Object}.7z.${i}"
    )"
    if [ "${ChecksumStored}" != "${ChecksumRemote}" ] ; then
      Log::Message 'error' \
          "recieved ${ChecksumRemote}, when ${ChecksumStored} was expected"
      return 1
    fi
    echo 'passed' >&2
    Iter=$(( ${Iter} + 1 ))
  done
}

function ADOS::Cleanup {
  if [ -d "${_tmpdir_}" ] ; then
    Directory::Remove "${_tmpdir_}" || :
  fi
}

function ADOS::Contents {
  local -r Input="${1}"
  local Iter=1
  local Object
  local -a Objects

  jq -r -c -M '.Contents' "${Input}" | openssl enc -base64 -d
}

function ADOS::Hash {
  Function::RequiredArgs '1' "$#"
  local -r Input="${1}"

  if [ "${Input}" == '-' ] ; then
    # Return a random sha256 hash
    openssl rand -rand /dev/urandom -hex 32 2>&-
  elif [ -f "${Input}" ] ; then
    # Hash the files hash so that we aren't returning the hash of the
    # actual file.
    openssl sha256 "${Input}" 2>&- |
        awk -F '= ' '{print $2 ; exit}' |
        openssl dgst -sha256 2>&- |
        awk -F '= ' '{print $2 ; exit}'
  elif [ -d "${Input}" ] ; then
    # Return a hash of the list of all file hashes
    find "${Input}" -type f |
        sort |
        tr '\n' '\0' |
        xargs -0 cat |
        openssl sha256 2>&- |
        awk -F '= ' '{print $2 ; exit}'
  else
    Log::Message 'error' "invalid argument: ${Input}"
    return 1
  fi
}

function ADOS::Get {
  Function::RequiredArgs '1' "$#"
  local -r Input="${1}"
  local Index
  local Iter=1
  local Object
  local -a Objects
  local Password

  Password="$(jq -r -c -M '.Password' "${Input}")"

  Object="$(jq -r -c -M '.Object.Name' "${Input}")"
  mapfile -t Objects < <(jq -r -c -M '.Object.Files[].Name' "${Input}")

  for i in "${Objects[@]}" ; do
    Log::Message 'info' "file ${Iter} of ${#Objects[@]}"
    ADOS::ACD 'download' "${_tmpdir_}/objects" "${ADOS_REMOTE_DIR}/${Object}.7z.${i}"
    Iter=$(( ${Iter} + 1 ))
  done

  ADOS::Extract "${Input}" "${_tmpdir_}/objects/${Object}.7z.001" "${Password}"
}

function ADOS::Put {
  Function::RequiredArgs '1' "$#"
  local ChecksumMd5
  local ChecksumSha1
  local ChecksumSha256
  local Filename
  local -r Input="${1}"
  local Iter=1
  local Name
  local Object
  local -a Objects
  local ObjectsFinalElement
  local Password

  Filename="$(basename "${Input}")"

  Password="$(ADOS::Hash '-')"

  Object="$(ADOS::Hash "${Input}")"

  ADOS::Compress "${Input}" "${Object}" "${Password}"

  mapfile -t Objects < <(find "${_tmpdir_}/objects" -name '*.7z.*')

  # Generate json file and upload each object file
  # {
  #   "Contents": "aGdhc2RmaGprYXNka2ZqLjd6LjAwMQo=",
  #   "Password": "1234",
  #   "Object": {
  #     "Name": "4321",
  #     "Files": [
  #       { "Name": "001",
  #         "Sha1": "ahsdfghjkasdf",
  #         "Md5": "asdfjkhasdfkl" },
  #       { "Name": "002",
  #         "Sha1": "ahsdfghjkasdf",
  #         "Md5": "asdfjkhasdfkl" }
  #     ]
  #   }
  # }
cat <<EOF > "${_tmpdir_}/${Filename}.json"
{
  "Contents": "$(
      ls -RalhgG "${Input}" |
          sed "s,$(dirname "${Input}")/,,g" |
          openssl enc -base64 2>&- |
          tr -d '\n'
  )",
  "Password": "${Password}",
  "Object": {
    "Name": "${Object}",
    "Files": [
EOF

  # Find last item in the array so that we don't have a trailing comma in json.
  ObjectsFinalElement="${Objects[$(( ${#Objects[@]} - 1 ))]}"

  # Enumerate object file list
  for i in "${Objects[@]}" ; do
    Log::Message 'info' "file ${Iter} of ${#Objects[@]}"
    ADOS::ACD 'upload' "${i}" "${ADOS_REMOTE_DIR}/"
    Name="$(echo "${i}" | sed -n -e 's/^.*\.7z\.//p')"
    ChecksumMd5="$(openssl md5 "${i}" 2>&- | awk -F '= ' '{print $2 ; exit}')"
    ChecksumSha1="$(
        openssl sha1 "${i}" 2>&- |
            awk -F '= ' '{print $2 ; exit}'
    )"
    ChecksumSha256="$(
        openssl sha256 "${i}" 2>&- |
            awk -F '= ' '{print $2 ; exit}'
    )"
    if [ "${i}" != "${ObjectsFinalElement}" ] ; then
      JsonSep=','
    else
      JsonSep=
    fi
cat <<EOF >> "${_tmpdir_}/${Filename}.json"
      { "Name": "${Name}",
        "Md5": "${ChecksumMd5}",
        "Sha1": "${ChecksumSha1}",
        "Sha256": "${ChecksumSha256}" }${JsonSep}
EOF
    Iter=$(( ${Iter} + 1 ))
  done

cat <<EOF >> "${_tmpdir_}/${Filename}.json"
    ]
  }
}
EOF

  cp -v "${_tmpdir_}/${Filename}.json" "$(dirname "${Input}")"
}

function ADOS::Trash {
  Function::RequiredArgs '1' "$#"
  local -r File="${1}"
  local Iter=1
  local Object
  local -a Objects

  Object="$(jq -r -c -M '.Object.Name' "${File}")"
  mapfile -t Objects < <(jq -r -c -M '.Object.Files[].Name' "${File}")

  for i in "${Objects[@]}" ; do
    Log::Message 'info' "file ${Iter} of ${#Objects[@]}"
    ADOS::ACD 'trash' '-' "${ADOS_REMOTE_DIR}/${Object}.7z.${i}"
    Iter=$(( ${Iter} + 1 ))
  done

  rm "${File}"
}

function ADOS::Main {
  Function::RequiredArgs '2' "$#"
  declare _tmpdir_
  local Input="${2}"
  local -r Mode="${1}"

  if [ ! -f "${Input}" ] && [ ! -d "${Input}" ] ; then
    Log::Message 'error' "${Mode} requires a file or directory"
    return 1
  fi

  Path::Check '7za'
  Path::Check 'awk'
  Path::Check 'find'
  Path::Check 'jq'
  Path::Check 'openssl'
  Path::Check 'rclone'
  Path::Check 'sed'
  Path::Check 'xargs'

  #rclone ls "${ADOS_RCLONE_REMOTE}:/" 1>&-

  Input="$(readlink -f "${Input}")"

  if [ "${Mode}" != 'trash' ] ; then
    _tmpdir_="$(dirname "${Input}")/.ad-os.$RANDOM"
    Directory::Create "${_tmpdir_}/objects"
  fi

  case "${Mode}" in
    'check')
      jq '' "${Input}" > /dev/null
      ADOS::Checksum "${Input}"
      ;;
    'get')
      jq '' "${Input}" > /dev/null
      ADOS::Get "${Input}"
      ;;
    'ls')
      jq '' "${Input}" > /dev/null
      ADOS::Contents "${Input}"
      ;;
    'put')
      ADOS::Put "${Input}"
      ;;
    'trash')
      jq '' "${Input}" > /dev/null
      ADOS::Trash "${Input}"
      ;;
    *)
      Log::Message 'error' "invalid mode: ${Mode}"
      return 1
      ;;
  esac

  ADOS::Cleanup
}

ADOS::Main "${@}"

exit 0
