#!/usr/bin/env bash

# A script to fix old ad-os json schemas

ADFIX_PURGE='false'  # Generate new json just to purge object contents
ADFIX_CONTENTS='false'  # Stripts explicit file paths from Contents
ADOS_REMOTE_DIR="${ADOS_REMOTE_DIR:-/backups}"
ADOS_RCLONE_REMOTE="${ADOS_RCLONE_REMOTE:-ad}"
LOG_LEVEL='info'

set -o errexit
set -o errtrace
set -o functrace
set -o pipefail

trap 'rm -rf ${_tmpdir_}' SIGTERM SIGINT ERR

########################### System/Vendored lib-bash ###########################

if type 'lib-bash' > /dev/null 2>&1 ; then
  source "$(lib-bash)"
else
Main::Name() {
  Function::RequiredArgs '0' "$#"
  if [ -n "${PROGRAM_NAME}" ] ; then
    echo "${PROGRAM_NAME}"
  else
    echo "$(basename "${0}")"
  fi
}

Directory::Create() {
  Function::RequiredArgs '1' "$#"
  while [ "${1}" ] ; do
    # Make sure directory is not a symlink
    if [ -L "${1}" ] ; then
      unlink "${1}" 1>&2
    fi
    # Create directory
    if [ ! -d "${1}" ] ; then
      mkdir --parents "${1}" 1>&2
    fi
    shift
  done
}

Directory::Remove() {
  Function::RequiredArgs '1' "$#"
  while [ "${1}" ] ; do
    # Make sure directory is not a symlink
    if [ -L "${1}" ] ; then
      unlink "${1}" 1>&2
    fi
    # Remove directory
    if [ -d "${1}" ] ; then
      rm --recursive --force "${1}" 1>&2
    fi
    shift
  done
}

Function::RequiredArgs() {
  local -r ArgsExpected=${1}
  local -r ArgsRecieved=${2}
  local -r ArgsNumber=$#
  local Plural=
  if [ ! ${ArgsNumber} == 2 ] ; then
    Log::Message 'error' "expected \`2' arguments, but recieved \`${ArgsNumber}'"
    return 1
  fi
  if [ ${ArgsExpected} -gt 1 ] ; then
    Plural='s'
  fi
  if [ ${ArgsExpected} -ne ${ArgsRecieved} ] ; then
    Log::Message 'error' \
        "expected \`${ArgsExpected}' argument${Plural}, but recieved \`${ArgsRecieved}'" \
        "${FUNCNAME[1]}"
    return 1
  fi
}

# Print a debug message with the current function and command executed
# Usage: add `set -o functrace` & `trap 'Log::Message' DEBUG`
Log::Func() {
  Function::RequiredArgs '0' "$#"
  # Requires `set -o functrace` to allow traps on DEBUG & RETURN to be
  # inherited by shell functions, command substitutions, and commands
  # executed in a subshell environment.

  if [ "${LOG_LEVEL}" == 'trace' ] ; then
    Log::Message 'debug' "${BASH_COMMAND}" "${FUNCNAME[1]}"
  fi
}

# Print a debug message with current function and custom message
# $1 - Level (trace,debug,info,warn,error,fatal)
# $2 - Message
# $3 - override name of function returned in message
Log::Message() {
  [[ $# == @(2|3) ]]
  local -r -i Descriptor="${DISCRIPTOR:-2}"
  local Func="${3}"
  local -r Level="${1}"
  local -r -A LogLevel=(
    ['off']=0
    ['fatal']=1
    ['error']=2
    ['warn']=3
    ['info']=4
    ['debug']=5
    ['trace']=6
  )
  local -r Message="${2}"

  if ! Var::Type.integer "${LogLevel[${Level}]}" 2>&- ; then
    echo "$(Main::Name) [error] ${FUNCNAME}: invalid debug level: ${Level}" >&2
    return 1
  fi

  Var::Type.string "${Message}"

  if ! Var::Type.string "${Func}" 2>&- ; then
    Func="${FUNCNAME[1]}"
  fi

  if [ ${LogLevel[${Level}]} -le ${LogLevel[${LOG_LEVEL}]} ] ; then
    echo "$(Main::Name) [${Level}] ${Func}: ${Message}" >&${Descriptor}
  fi
}

Log::Trace() {
  Function::RequiredArgs '0' "$#"
  local -i i=0
  local -i x=${#BASH_LINENO[@]}

  for ((i=x-2; i>=0; i--)) ; do
    echo '  File' \"${BASH_SOURCE[i+1]}\", line ${BASH_LINENO[i]}, in ${FUNCNAME[i+1]}
    # Print the text from the line
    sed -n "${BASH_LINENO[i]}{s/^/    /;p}" "${BASH_SOURCE[i+1]}"
  done
}

# Test to see if a binary exists in the path
Path::Check() { Function::RequiredArgs '1' "$#" ; type "${1}" > /dev/null 2>&1 ; }

String::Version() {
  Function::RequiredArgs '2' "$#"
  if [ "${1}" == "${2}" ] ; then
    echo 'eq' ; return 0
  fi
  local -r IFS=.
  local -i i
  local -a ver1=(${1})
  local -a ver2=(${2})
  # fill empty fields in ver1 with zeros
  for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)) ; do
      ver1[i]=0
  done
  for ((i=0; i<${#ver1[@]}; i++)) ; do
    if [[ -z ${ver2[i]} ]] ; then
      # fill empty fields in ver2 with zeros
      ver2[i]=0
    elif ((10#${ver1[i]} > 10#${ver2[i]})) ; then
      echo 'gt' ; return 0
    elif ((10#${ver1[i]} < 10#${ver2[i]})) ; then
      echo 'lt' ; return 0
    fi
  done
  Log::Message 'error' 'version comparison failed'
  return 1
}

String::Version.atleast() { [[ "$(String::Version "${1}" "${2}")" == @('eq'|'gt') ]] ; }

# Detect variable type
Var::Type() {
  Function::RequiredArgs '1' "$#"
  local -r Var="${1}"

  if [[ ${Var} =~ ^-?[0-9]+\.[0-9]+$ ]] ; then
    echo 'float'
  elif [[ ${Var} =~ ^-?[0-9]+$ ]] ; then
    echo 'integer'
  elif [ "${Var}" == true ] || [ "${Var}" == false ] ; then
    echo 'boolean'
  elif [ ! -z "${Var}" ] ; then
    echo 'string'
  else
    echo 'null'
  fi
}

# Detect if variable type is integer
Var::Type.integer() {
  Function::RequiredArgs '1' "$#"
  local Type
  local -r Var="${1}"

  Type="$(Var::Type "${Var}")"

  [ "${Type}" == 'integer' ] || {
    Log::Message 'error' \
      "Value is a ${Type}, while a integer was expected" \
      "${FUNCNAME[1]}"
    return 1
  }
}

# Detect if variable type is string
Var::Type.string() {
  Function::RequiredArgs '1' "$#"
  local Type
  local -r Var="${1}"

  Type="$(Var::Type "${Var}")"

  [ "${Type}" != 'null' ] || {
    Log::Message 'error' \
      "Value is a ${Type}, while string was expected" \
      "${FUNCNAME[1]}"
    return 1
  }
}
fi

################################################################################

function ADOS::ACD {
  local -r Action="${1}"
  local -a Arguments
  local -r PathLocal="${2}"
  local -r PathRemote="${3}"

  # Fix ordering of arguments passed to rclone
  case "${Action}" in
    'checksum')
      Arguments=(
        'md5sum'
        '--quiet'
        "${ADOS_RCLONE_REMOTE}:${PathRemote}"
      )
      rclone "${Arguments[@]}" | awk -F' ' '{print $1 ; exit}'
      return 0
      ;;
    'download')
      Arguments=(
        'sync'
        "${ADOS_RCLONE_REMOTE}:${PathRemote}"
        "${PathLocal}"
      )
      ;;
    'trash')
      Arguments=(
        'delete'
        '--drive-use-trash'
        "${ADOS_RCLONE_REMOTE}:${PathRemote}"
      )
      ;;
    'upload')
      Arguments=(
        'sync'  # Copy backs off it the file already exists, sync overwrites
        "${PathLocal}"
        "${ADOS_RCLONE_REMOTE}:${PathRemote}"
      )
      ;;
    *)
      Log::Message 'error' "invalid action: ${Action}"
      return 1
      ;;
  esac

  # Retry until a zero exit staus is returned
  while true ; do
    if [ "${Action}" == 'upload' ] ; then
      rclone 'delete' '--drive-use-trash' "${PathRemote}" || :
    fi
    rclone "${Arguments[@]}" || {
      echo 'retrying' >&2
      if [ "${Action}" == 'upload' ] ; then
        rclone 'delete' '--drive-use-trash' "${PathRemote}" || :
      fi
      continue
    }
    break
  done
}

function ADOS::Checksum {
  local -r Input="${1}"
  local Iter=1
  local Object
  local -a Objects

  Object="$(jq -r -c -M '.Object.Name' "${Input}")"
  mapfile -t Objects < <(jq -r -c -M '.Object.Files[].Name' "${Input}")

  for i in "${Objects[@]}" ; do
    Log::Message 'info' "file ${Iter} of ${#Objects[@]}"
    ChecksumStored="$(
        jq -r -c -M \
            ".Object.Files[]|select(.Name|contains(\"${i}\")).Md5" \
            "${Input}"
    )"
    ChecksumRemote="$(
        ADOS::ACD 'checksum' '-' "${ADOS_REMOTE_DIR}/${Object}.7z.${i}"
    )"
    if [ "${ChecksumStored}" != "${ChecksumRemote}" ] ; then
      Log::Message 'error' \
          "recieved ${ChecksumRemote}, when ${ChecksumStored} was expected"
      return 1
    fi
    echo 'passed' >&2
    Iter=$(( ${Iter} + 1 ))
  done
}

Main() {
  local File="${1}"
  local Contents
  local Iter=1
  local Object
  local -a ObjectFiles
  local -a ObjectFilesOld
  local Password

  if [ ! -f "${File}" ] ; then
    Log::Message 'error' "not a file"
    return 1
  fi

  if jq '.ZipFragments[].file' "${File}" 2>&- ; then
    Format=1
  elif jq '.Objects[].file' "${File}" 2>&- ; then
    Format=2
  elif jq '.Object.Files[].Name' "${File}" 2>&- ; then
    Format=4
    return 0  # Already using latest format
  elif jq '.Object.Files[]' "${File}" 2>&- ; then
    Format=3
  else
    Log::Message 'error' "can't detect format"
    return 1
  fi

  Log::Message 'info' "format: ${Format}"

  Filename="$(basename "${File}" | sed 's/.json//')"

  _tmpdir_="$(dirname "${Input}")/.ad-fix.$RANDOM"
  mkdir -p "${_tmpdir_}"/{content,build-json,final,objects,test}

  Password="$(jq -r -c -M '.Password' "${File}")"

  if [ ${Format} -eq 1 ] ; then
    mapfile -t ObjectFilesOld < <(jq -r -c -M '.ZipFragments[].file' "${File}")
  elif [ ${Format} -eq 2 ] ; then
    mapfile -t ObjectFilesOld < <(jq -r -c -M '.Objects[].file' "${File}")
  elif [ ${Format} -eq 3 ] ; then
    mapfile -t ObjectFiles < <(jq -r -c -M '.Object.Files[]' "${File}")
  elif [ ${Format} -eq 4 ] ; then
    mapfile -t ObjectFiles < <(jq -r -c -M '.Object.Files[].Name' "${File}")
  fi
  if [ ${Format} -le 2 ] ; then
    for i in "${ObjectFilesOld[@]}" ; do
      ObjectFiles+=("$(echo "${i}" | sed -n -e 's/^.*\.7z\.//p')")
    done
    Object="$(echo "${ObjectFilesOld[0]}" | sed -e 's/\.7z\..*$//')"
  else
    Object="$(jq -r -c -M '.Object.Name' "${File}")"
  fi

  Log::Message 'info' "object: ${Object}"

  if [ ${Format} -ge 4 ] ; then
cat <<EOF > "${_tmpdir_}/build-json/${Filename}.json"
{
  "Contents": $(jq -r -c -M '.Object.Contents' "${File}"),
  "Password": "${Password}",
  "Object": {
    "Name": "${Object}",
    "Files": [
EOF
  else
cat <<EOF > "${_tmpdir_}/build-json/${Filename}.json"
{
  "Contents": "//n///a//",
  "Password": "${Password}",
  "Object": {
    "Name": "${Object}",
    "Files": [
EOF
  fi

  # Find last item in the array so that we don't have a trailing comma in json.
  ObjectFilesFinalElement="${ObjectFiles[$(( ${#ObjectFiles[@]} - 1 ))]}"

  echo "${ObjectFiles[@]}" >&2

  # Enumerate object file list
  for i in "${ObjectFiles[@]}" ; do
    Log::Message 'info' "file ${Iter} of ${#ObjectFiles[@]}"
    if [ "${ADFIX_PURGE}" != 'true' ] ; then
      rclone 'sync' \
        "${ADOS_RCLONE_REMOTE}:${ADOS_REMOTE_DIR}/${Object}.7z.${i}" \
        "${_tmpdir_}/objects/"
    fi
    Name="${i}"
    if [ "${ADFIX_PURGE}" != 'true' ] ; then
      ChecksumMd5="$(
          openssl md5 "${_tmpdir_}/objects/${Object}.7z.${i}" 2>&- |
              awk -F '= ' '{print $2 ; exit}'
      )"
      ChecksumSha1="$(
          openssl sha1 "${_tmpdir_}/objects/${Object}.7z.${i}" 2>&- |
              awk -F '= ' '{print $2 ; exit}'
      )"
      ChecksumSha256="$(
          openssl sha256 "${_tmpdir_}/objects/${Object}.7z.${i}" 2>&- |
              awk -F '= ' '{print $2 ; exit}'
      )"
    fi
    if [ "${i}" != "${ObjectFilesFinalElement}" ] ; then
      JsonSep=','
    else
      JsonSep=
    fi
cat <<EOF >> "${_tmpdir_}/build-json/${Filename}.json"
      { "Name": "${Name}",
        "Md5": "${ChecksumMd5}",
        "Sha1": "${ChecksumSha1}",
        "Sha256": "${ChecksumSha256}" }${JsonSep}
EOF
    Iter=$(( ${Iter} + 1 ))
  done

cat <<EOF >> "${_tmpdir_}/build-json/${Filename}.json"
    ]
  }
}
EOF

  cp "${_tmpdir_}/build-json/${Filename}.json" \
    "${_tmpdir_}/final/${Filename}.json"

  if [ "${ADFIX_PURGE}" != 'true' ] ; then
    7za 'x' "-p${Password}" "-o${_tmpdir_}/test" \
      "${_tmpdir_}/objects/${Object}.7z.001"

    sed -i "${_tmpdir_}/final/${Filename}.json" \
      -e "s@//n///a//@$(ls -RalhgG "${_tmpdir_}/test" | sed "s,${_tmpdir_}/test/,,g" | openssl enc -base64 2>&- | tr -d '\n')@"

    ADOS::Checksum "${_tmpdir_}/final/${Filename}.json"
  fi

  rm "${File}"
  cp -v "${_tmpdir_}/final/${Filename}.json" "$(dirname "${File}")"

  rm -rf "${_tmpdir_}"
}

Contents() {
  local -r File="${1}"
  local Contents
  local -a StripPaths

  StripPaths=(
    "${HOME}/Videos/Television/"
    "${HOME}/Videos/Movies/"
    "${HOME}/Videos/"
    "${HOME}/Torrents/"
    "${HOME}/"
  )

  FixedText() {
    local -r File="${1}"
    local -r Remove="${2}"
    jq -r '.Contents' "${File}" |
        openssl enc -base64 -d 2>&- |
        sed -e "s,${Remove},,g" |
        openssl enc -base64 2>&- |
        tr -d '\n'
  }

  if ! jq '' "${File}" > /dev/null ; then
    return 0
  fi

  echo "${File}" >&2
  for i in "${StripPaths[@]}" ; do
    sed -i "${File}" \
      -e "s@$(jq -r '.Contents' "${File}")@$(FixedText "${File}" "${i}")@"
  done
}

for i in "${@}" ; do
  if [ "${ADFIX_CONTENTS}" != 'true' ] ; then
    Main "$(readlink -f "${i}")"
  else
    Contents "$(readlink -f "${i}")"
  fi
done
