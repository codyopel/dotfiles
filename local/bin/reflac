#!/usr/bin/env python3

# Ensures all lossless files in a given path are encoded as FLAC with
# compression level 8.

import os
import multiprocessing
import shutil
import subprocess
import sys

# FIXME: use something other than asserts
assert shutil.which('flac') != None
assert shutil.which('ffmpeg') != None
assert shutil.which('metaflac') != None

def convert2flac(ifile):
  filename, extension = os.path.splitext(ifile)
  print('converting: ' + ifile + ' -> ' + filename + '.flac')
  p = subprocess.Popen(["ffmpeg", "-i", ifile, filename + ".flac"],
                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  p.wait()
  if p.returncode != 0:
    raise IOError("ffmpeg failed: %s" % error)
  return filename + '.flac'

def flac_reencode(ifile):
  filename, extension = os.path.splitext(ifile)
  if extension == '.flac':
    # Don't re-process processed files
    if is_flac_compressed(ifile):
      print('already compressed: ' + ifile)
      return True
  else:
    ifile = convert2flac(ifile)

  print('compressing: ' + ifile)

  # XXX: maybe add a way to support decode through errors
  f = subprocess.Popen(['flac', ifile, '--force', '--verify',
                       '--compression-level-8', '--exhaustive-model-search'],
                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  f.wait()
  if f.returncode != 0:
    raise IOError("flac failed: %s" % ferror)

  m = subprocess.Popen(["metaflac", "--set-tag=COMPRESSION=8", ifile],
                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  m.wait()
  if m.returncode != 0:
    raise IOError("metaflac failed: %s" % merror)

  # Check to see if subprocess succeeded
  exit = is_flac_compressed(ifile)

  if exit:
    print('compressed: ' + ifile)

  return exit

def is_flac_compressed(ifile):
  l = subprocess.Popen(["metaflac", "--show-tag=COMPRESSION", ifile],
                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  output, error = l.communicate()
  if l.returncode != 0:
    raise IOError("metaflac failed: %s" % error)
  out = output.rstrip().decode("utf-8")
  return True if out == 'COMPRESSION=8' else False

idir = str(sys.argv[1])
assert os.path.isdir(idir)  # FIXME

audioFiles = []
for r, dirs, files in os.walk(idir):
  for f in files:
    if os.path.isfile(os.path.join(r, f)):
      filename, extension = os.path.splitext(f)
      if extension not in ['.ape', '.flac', '.wav']:
        continue
      audioFiles.append(os.path.join(r, f))


threads = multiprocessing.cpu_count()
pool = multiprocessing.Pool(processes=8)
results = pool.map_async(flac_reencode, audioFiles)
pool.close()
pool.join()
